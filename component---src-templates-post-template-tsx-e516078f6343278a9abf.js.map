{"version":3,"file":"component---src-templates-post-template-tsx-e516078f6343278a9abf.js","mappings":"yNAWA,IAAMA,GAAmB,2NAenBC,GAAM,uUAmBNC,GAAK,6TAkBLC,GAAQ,iRAqCd,EArB2D,YAIvD,IAHFC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAIA,OACE,gBACE,WAAQC,QAJO,kBAAMC,OAAAA,QAAN,UAKb,aAAMC,KAAK,gBAEb,eAJF,IAKE,gBACE,mBAAMH,EAAAA,KADR,SAEE,mBARN,MCvEF,IAAMI,GAAe,iJASfC,GAAkB,QAAO,mBAC3B,0BAAwBC,MAAO,CAAEC,SAAU,iBADvB,sBAAH,sGAwBrB,EAdmD,YAK/C,IAJAT,EAID,EAJCA,MACAC,EAGD,EAHCA,KACAC,EAED,EAFCA,WACAQ,EACD,EADCA,UAEA,OACI,gBACI,WAAiBC,MAAjB,EAAmCC,IAAI,eACvC,WAAcZ,MAAd,EAA4BC,KAA5B,EAAwCC,WAAYA,MCrChE,IAAMW,GAAgB,ygCAoItB,EAJyD,YAAqB,IAATC,EAAQ,EAARA,KACnE,OAAO,WAAkBC,wBAAyB,CAAEC,OAAQF,M,UCpI9D,IAaMG,GAAiB,uGAkCvB,EA5ByC,WACrC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACN,UAAIF,EAAAA,QAAJ,CAEA,IAAMG,EAAgCC,SAAAA,cAAtC,UAEMC,EAAuC,CACzCC,IA5BZ,gCA6BYC,KA5BZ,oCA6BY,aAHyC,WAIzCC,MAJyC,UAKzCC,MALyC,eAMzCC,YANyC,YAOzCC,MAAO,QAGXC,OAAAA,QAAAA,GAAAA,SAAmC,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACjDX,EAAAA,aAAAA,EAAAA,MAGJH,EAAAA,QAAAA,YAAAA,MAnBJE,KAsBO,WAAmBa,IAAKf,KCSnC,EArC2D,YAKvD,IAHqBgB,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAcIH,EAdJ,QAEIpB,EAFJ,uBAIMd,EAJN,QAKMuC,EALN,UAMMtC,EANN,OAOMC,EAPN,2BAS2BsC,EAT3B,kCAUQC,EAVR,YAgBA,OACE,aAAUzC,MAAV,EAAwB0C,YAAxB,EAA8CC,IAA9C,EAAyDhC,MAAO8B,IAC9D,WACEzC,MADF,EAEEC,KAFF,EAGEC,WAHF,EAIEQ,UAAW8B,KAEb,WAAa1B,KAAMA,KACnB,UATJ","sources":["webpack://onshorelog/./src/components/Post/PostHeadInfo.tsx","webpack://onshorelog/./src/components/Post/PostHead.tsx","webpack://onshorelog/./src/components/Post/PostContent.tsx","webpack://onshorelog/./src/components/Post/CommentWidget.tsx","webpack://onshorelog/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nimport Icon from '../Common/Icon'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: #ffffff;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nconst Button = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 40px;\n  height: 40px;\n  border: 1px solid rgb(222, 226, 230);\n  border-radius: 50%;\n  background-color: rgb(255, 255, 255);\n  box-shadow: rgb(0 0 0 / 10%) 0px 1px 3px;\n  cursor: pointer;\n  color: black;\n\n  :hover {\n    background-color: white;\n  }\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  line-height: 1.2;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const goBackPage = () => window.history.back();\n\n  return (\n    <PostHeadInfoWrapper>\n      <Button onClick={goBackPage}>\n        <Icon icon=\"arrowLeft\" />\n      </Button>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n    thumbnail: IGatsbyImageData\n}\ntype GatsbyImgProps = {\n    image: IGatsbyImageData\n    alt: string\n    className?: string\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n    <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n    title,\n    date,\n    categories,\n    thumbnail,\n}) {\n    return (\n        <PostHeadWrapper>\n            <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n            <PostHeadInfo title={title} date={date} categories={categories} />\n        </PostHeadWrapper>\n    )\n}\n\nexport default PostHead","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 2.5;\n  font-size: 16px;\n  font-weight: 400;\n\n  p {\n    padding-bottom: 40px;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4 {\n    font-weight: 700;\n    margin-bottom: 20px;\n    line-height: 1.5;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 20px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 28px;\n  }\n\n  h2 {\n    font-size: 24px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  img {\n    width: 768px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 20px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 40px;\n    padding: 10px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 20px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 24px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 16px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'SonSangjoon/SonSangjoon.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n    src: string\n    repo: string\n    'issue-term': string\n    label: string\n    theme: string\n    crossorigin: string\n    async: string\n};\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n    const element = createRef<HTMLDivElement>()\n\n    useEffect(() => {\n        if (element.current === null) return\n\n        const utterances: HTMLScriptElement = document.createElement('script')\n\n        const attributes: UtterancesAttributesType = {\n            src,\n            repo,\n            'issue-term': 'pathname',\n            label: 'Comment',\n            theme: `github-light`,\n            crossorigin: 'anonymous',\n            async: 'true',\n        }\n\n        Object.entries(attributes).forEach(([key, value]) => {\n            utterances.setAttribute(key, value)\n        })\n\n        element.current.appendChild(utterances)\n    }, [])\n\n    return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types' // 바로 아래에서 정의할 것입니다\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"names":["PostHeadInfoWrapper","Button","Title","PostData","title","date","categories","onClick","window","icon","PostHeadWrapper","BackgroundImage","style","position","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","utterances","document","attributes","src","repo","label","theme","crossorigin","async","Object","key","value","ref","edges","data","allMarkdownRemark","href","location","summary","gatsbyImageData","publicURL","description","url"],"sourceRoot":""}