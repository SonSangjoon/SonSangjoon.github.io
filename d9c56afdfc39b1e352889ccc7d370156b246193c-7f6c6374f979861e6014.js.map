{"version":3,"file":"d9c56afdfc39b1e352889ccc7d370156b246193c-7f6c6374f979861e6014.js","mappings":"wMAWA,ICXoDA,EAASC,EDiD7D,EAtCmD,YAS/C,IARFC,EAQC,EARDA,MACAC,EAOC,EAPDA,KACAC,EAMC,EANDA,WACAC,EAKC,EALDA,QAEqBC,EAGpB,EAJDC,UACEC,gBAAmBF,gBAErBG,EACC,EADDA,KAGMC,EADO,IAAIC,KAAjB,GACmBC,eAAAA,MAAnB,KAEA,OACE,gBACE,WAAoBC,GAAIJ,IACtB,WAAgBK,MAAhB,EAAwCC,IAAI,qBAC5C,gBACE,eAAgBL,EADlB,KAEE,eAAiBA,EALvB,OAQE,gBACE,eACGN,EAAA,KAAe,SAAAY,GAAI,OAClB,WAAcH,GAAE,mBAAhB,EAA6CI,IAAKD,IAChD,eAFgB,SAMtB,eARF,IASE,eATF,IAUE,WAAUH,GAAIJ,GAnBpB,gBA2BIS,GAAqB,mCAAH,sGAOlBC,GAAiB,kCAAH,8KAYdC,GAAgB,oUAuBhBC,GAAc,uPAYdC,GAAa,yQAabC,GAAe,gLAWfC,GAAQ,yGAMRC,GAAe,kCAAH,gKAaZC,GAAY,yIAQZC,GAAK,wRAeLC,GAAW,kCAAH,qKAWRC,GAAO,oQAYPC,GAAkBC,EAAAA,EAAAA,IAAH,IClM+B/B,EDkM/B,CAArB,yDCjMOC,IACHA,EAAMD,EAAQgC,MAAM,IAGtBhC,EAAQC,IAAMA,ED6LK,EC5LZD,IDgMHiC,GAAe,wL,UEpIrB,EAxD0B,cAItB,IAAMC,GACFC,EAAAA,EAAAA,QADJ,MAEMC,GACFD,EAAAA,EAAAA,QADJ,MAEA,GAA0BE,EAAAA,EAAAA,UAA1B,GAAOC,EAAP,KAAcC,EAAd,KAEMC,GAAqBC,EAAAA,EAAAA,UACvB,kBACIC,EAAA,QACI,gBAEuBtC,EAFvB,oCAKIuC,QAAAA,GACMvC,EAAAA,SADNuC,QAIZ,CAZJ,IAwCA,OAzBAC,EAAAA,EAAAA,YAAU,WACNR,EAAAA,QAAmB,IAAIS,sBAAqB,cACnCC,EAAAA,GAAL,iBAEAP,GAAS,SAAAQ,GAAK,OAAIA,EAAJ,KACdX,EAAAA,UAAmBU,EAAAA,GAAnBV,cALRQ,KASAA,EAAAA,EAAAA,YAAU,kBAAML,EAAN,KAAmB,CAA7BK,KAEAA,EAAAA,EAAAA,YAAU,WAtCd,GAwCYI,GAAoCR,EAApCQ,QAAAA,OACAd,EAAAA,SADAc,IAEAd,EAAAA,QAAAA,SAAAA,QAHJ,OAIIE,EAAAA,SAIJA,EAAAA,QAAAA,QACIF,EAAAA,QAAAA,SAA8BA,EAAAA,QAAAA,SAAAA,OADlCE,MAGD,CAACE,EAZJM,IAcO,CACHV,aADG,EAEHe,SAAUT,EAAAA,MAAAA,EAtDlB,GAsD8CF,KC/B9C,IAAMY,GAAe,mNA0CrB,EA7BmD,YAI/C,IAHFP,EAGC,EAHDA,iBACAD,EAEC,EAFDA,MACAS,EACC,EADDA,MAEA,EAA0DC,EAAkB,EAA5E,GAAQlB,EAAR,eAAsBe,EAAtB,WAKA,OACE,WAAiBI,IAAKnB,GACnBe,EAAA,KAEG,yBAEIK,EAFJ,KAGcC,EAHd,cAIIC,EAJJ,qBAOE,wBAA2B/C,KAA3B,EAAuCQ,IAAKqC,QATjD,QAFL","sources":["webpack://onshorelog/./src/components/Blog/PostItem.tsx","webpack://onshorelog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://onshorelog/./src/hooks/useInfiniteScroll.tsx","webpack://onshorelog/./src/components/Blog/PostList.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport styled from '@emotion/styled'\nimport { keyframes } from '@emotion/react'\n\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  const time = new Date(date)\n  const dataString = time.toDateString().split(' ')\n\n  return (\n    <PostItemWrapper>\n      <ThumbnailContainer to={link}>\n        <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n        <ThumbnailOverlay>\n          <ThumbnailText>{dataString[2]}</ThumbnailText>\n          <ThumbnailMonth>{dataString[1]}</ThumbnailMonth>\n        </ThumbnailOverlay>\n      </ThumbnailContainer>\n      <PostItemContent>\n        <Category>\n          {categories.map(item => (\n            <CategoryItem to={`/blog/?category=${item}`} key={item}>\n              <CategoryText>{item}</CategoryText>\n            </CategoryItem>\n          ))}\n        </Category>\n        <Title>{title}</Title>\n        <Summary>{summary}</Summary>\n        <PostLink to={link}>Read More</PostLink>\n      </PostItemContent>\n    </PostItemWrapper>\n  )\n}\n\nexport default PostItem\n\nconst ThumbnailContainer = styled(Link)`\n  position: relative;\n  margin-right: 20px;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 240px;\n  height: 160px;\n  border-radius: 10px;\n  margin-right: 20px;\n  object-fit: cover;\n  object-position: center center;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst ThumbnailOverlay = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  position: absolute;\n  width: 240px;\n  height: 0px;\n  border-radius: 10px;\n\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: white;\n  overflow: hidden;\n\n  transition: 300ms ease-out;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst ThumbnailMonth = styled.p`\n  color: black;\n  font-size: 20px;\n  position: absolute;\n  top: 80%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  text-align: center;\n`\n\nconst ThumbnailText = styled.p`\n  color: black;\n  font-size: 80px;\n  font-weight: 1000;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  text-align: center;\n`\n\nconst PostItemContent = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  max-height: 300px\n  width : 50\n  border-radius: 10px;\n  flex-wrap: wrap;\n  padding: 4px;\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0px -5px;\n`\n\nconst CategoryItem = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  margin: 3px;\n  border-radius: 8px;\n  background: #dee2e6;\n\n  :hover {\n    color: '#FFFFFF';\n    background: '#ADB5BD';\n  }\n`\n\nconst CategoryText = styled.span`\n  padding: 4px 8px;\n  color: gray;\n  font-size: 10px;\n  font-weight: 800;\n  line-height: 12px;\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  margin: 10px 0px;\n  font-size: 20px;\n  font-weight: 700;\n  letter-spacing: 1px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n`\n\nconst PostLink = styled(Link)`\n  display: contents;\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n  cursor: pointer;\n  border-bottom: solid;\n  color: #ced4da;\n  transition: all 300ms ease-out;\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 14px;\n  opacity: 0.8;\n`\nconst colorTransition = keyframes`\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0; }\n`\nconst PostItemWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  border-radius: 10px;\n  padding: 2px;\n  flex-wrap: wrap;\n\n  :hover {\n    ${PostLink} {\n      animation: ${colorTransition} 1s ease infinite;\n    }\n    ${ThumbnailOverlay} {\n      height: 100%;\n    }\n  }\n`\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n    containerRef: MutableRefObject<HTMLDivElement | null>\n    postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n    selectedCategory: string,\n    posts: PostListItemType[],\n): useInfiniteScrollType {\n    const containerRef: MutableRefObject<HTMLDivElement | null> =\n        useRef<HTMLDivElement>(null)\n    const observer: MutableRefObject<IntersectionObserver | null> =\n        useRef<IntersectionObserver>(null)\n    const [count, setCount] = useState<number>(1)\n\n    const postListByCategory = useMemo<PostListItemType[]>(\n        () =>\n            posts.filter(\n                ({\n                    node: {\n                        frontmatter: { categories },\n                    },\n                }: PostListItemType) =>\n                    selectedCategory !== 'All'\n                        ? categories.includes(selectedCategory)\n                        : true,\n            ),\n        [selectedCategory],\n    )\n\n    useEffect(() => {\n        observer.current = new IntersectionObserver((entries, observer) => {\n            if (!entries[0].isIntersecting) return\n\n            setCount(value => value + 1)\n            observer.unobserve(entries[0].target)\n        })\n    }, [])\n\n    useEffect(() => setCount(1), [selectedCategory])\n\n    useEffect(() => {\n        if (\n            NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n            containerRef.current === null ||\n            containerRef.current.children.length === 0 ||\n            observer.current === null\n        )\n            return\n\n        observer.current.observe(\n            containerRef.current.children[containerRef.current.children.length - 1],\n        )\n    }, [count, selectedCategory])\n\n    return {\n        containerRef,\n        postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n    }\n}\n\nexport default useInfiniteScroll","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nimport { PostListItemType } from 'types/PostItem.types'\nimport PostItem from 'components/Blog/PostItem'\n\nimport useInfiniteScroll, {\n  useInfiniteScrollType,\n} from 'hooks/useInfiniteScroll'\n\ntype PostListProps = {\n  selectedCategory: string\n  posts: PostListItemType[]\n  limit: number\n}\n\nexport type PostType = {\n  node: {\n    id: string\n    frontmatter: {\n      title: string\n      summary: string\n      date: string\n      categories: string[]\n      thumbnail: {\n        publicURL: string\n      }\n    }\n  }\n}\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n  selectedCategory,\n  posts,\n  limit,\n}) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n  )\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList\n        .map(\n          ({\n            node: {\n              id,\n              fields: { slug },\n              frontmatter,\n            },\n          }: PostListItemType) => (\n            <PostItem {...frontmatter} link={slug} key={id} />\n          ),\n        )\n        .slice(0, limit)}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList\n"],"names":["strings","raw","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","dataString","Date","time","to","image","alt","item","key","ThumbnailContainer","ThumbnailImage","ThumbnailOverlay","ThumbnailMonth","ThumbnailText","PostItemContent","Category","CategoryItem","CategoryText","Title","PostLink","Summary","colorTransition","keyframes","slice","PostItemWrapper","containerRef","useRef","observer","useState","count","setCount","postListByCategory","useMemo","posts","selectedCategory","useEffect","IntersectionObserver","entries","value","NUMBER_OF_ITEMS_PER_PAGE","postList","PostListWrapper","limit","useInfiniteScroll","ref","id","slug","frontmatter"],"sourceRoot":""}